name: Performance Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests flask schedule aiohttp numpy
        pip install pytest pytest-benchmark memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json || echo "Benchmark tests completed"
    
    - name: Memory profiling
      run: |
        python -m memory_profiler scripts/modules/core/real_predictor.py || echo "Memory profiling completed"
    
    - name: System performance test
      run: |
        python -c "
        import time
        import sys
        import os
        sys.path.append('scripts')
        sys.path.append('src')
        
        # システム起動時間計測
        start_time = time.time()
        try:
            from modules.main_app import create_application
            app = create_application()
            startup_time = time.time() - start_time
            print(f'System startup time: {startup_time:.2f}s')
            
            # メモリ使用量計測
            import psutil
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            print(f'Memory usage: {memory_mb:.1f}MB')
            
            # 起動時間の閾値チェック (10秒以内)
            if startup_time > 10:
                print('WARNING: Startup time exceeds 10 seconds')
            
            # メモリ使用量の閾値チェック (500MB以内)
            if memory_mb > 500:
                print('WARNING: Memory usage exceeds 500MB')
                
        except Exception as e:
            print(f'Performance test error: {e}')
        "
    
    - name: API response time test
      run: |
        python -c "
        import requests
        import time
        import threading
        import sys
        import os
        sys.path.append('scripts')
        
        # バックグラウンドでサーバー起動
        def start_server():
            try:
                os.system('python scripts/web_app_modular.py &')
            except:
                pass
        
        # サーバー起動を別スレッドで実行
        server_thread = threading.Thread(target=start_server, daemon=True)
        server_thread.start()
        
        # サーバー起動待機
        time.sleep(10)
        
        # API レスポンス時間測定
        try:
            start_time = time.time()
            response = requests.get('http://localhost:5001/status', timeout=5)
            response_time = time.time() - start_time
            
            print(f'API response time: {response_time:.3f}s')
            
            if response.status_code == 200:
                print('API health check: PASSED')
            else:
                print(f'API health check: FAILED (status: {response.status_code})')
                
            # レスポンス時間の閾値チェック (2秒以内)
            if response_time > 2:
                print('WARNING: API response time exceeds 2 seconds')
                
        except Exception as e:
            print(f'API test error: {e}')
        " || echo "API performance test completed"